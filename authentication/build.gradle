buildscript {
    ext {
        cleanArchitectureVersion = '3.24.0'
        springBootVersion = '3.5.4'
        sonarVersion = '6.2.0.5505'
        jacocoVersion = '0.8.13'
        pitestVersion = '1.19.0-rc.1'
        lombokVersion = '1.18.38'

        // ðŸ”‘ Dependencias centrales
        r2dbcPostgresVersion = '1.0.2.RELEASE'
        flywayVersion = '10.21.0'

        // ðŸ†• Agregadas para solucionar el problema de Jackson
        jacksonVersion = '2.17.2' // VersiÃ³n compatible con Spring Boot 3.5.4
        reactorVersion = '3.6.11'
        mockitoVersion = '5.14.2'
    }
}

plugins {
    id 'co.com.bancolombia.cleanArchitecture' version "${cleanArchitectureVersion}"
    id 'org.springframework.boot' version "${springBootVersion}" apply false
    id 'info.solidsoft.pitest' version "${pitestVersion}" apply false
    id 'org.sonarqube' version "${sonarVersion}"
    id 'jacoco'
}

sonar {
    def modules = subprojects.projectDir.collect { "${it.toString().replace(project.projectDir.toString() + "/", "")}" }
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.modules", "${modules.join(',')}"
        property "sonar.sources", "src,deployment,settings.gradle,main.gradle,build.gradle,${modules.collect { "${it}/build.gradle" }.join(',')}"
        property "sonar.exclusions","**/MainApplication.java"
        property "sonar.tests", "src/test"
        property "sonar.java.binaries", "**/build/classes/java/main"
        property "sonar.junit.reportsPath", "**/build/test-results/test"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacocoMergedReport/jacocoMergedReport.xml"
        property "sonar.pitest.reportPaths", "build/reports/pitest/mutations.xml"
        property "sonar.externalIssuesReportPaths", "build/issues.json"
    }
}

allprojects {
    repositories {
        mavenCentral()
    }

    tasks.withType(JavaCompile) {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
}

// ðŸ†• ConfiguraciÃ³n centralizada de dependencias para subproyectos
subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'

    // ðŸ”§ GestiÃ³n centralizada de versiones de dependencias
    configurations.all {
        resolutionStrategy {
            // ðŸš¨ Forzar versiones especÃ­ficas para evitar conflictos
            force "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"
            force "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
            force "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
            force "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"

            // Otros forzados para consistencia
            force "io.projectreactor:reactor-core:${reactorVersion}"
            force "io.projectreactor:reactor-test:${reactorVersion}"
            force "org.mockito:mockito-core:${mockitoVersion}"
            force "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
        }
    }

    // ðŸ§ª ConfiguraciÃ³n de testing para todos los mÃ³dulos
    test {
        useJUnitPlatform()
        finalizedBy jacocoTestReport

        testLogging {
            events "passed", "skipped", "failed"
            exceptionFormat "full"
            showStandardStreams = false
        }

        // JVM args para tests
        jvmArgs = [
                '-Xmx1g',
                '-XX:+UseG1GC'
        ]
    }

    // ðŸ“Š ConfiguraciÃ³n de JaCoCo por mÃ³dulo
    jacocoTestReport {
        dependsOn test

        reports {
            xml.required = true
            html.required = true
            csv.required = false
        }

        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: [
                        '**/config/**',
                        '**/dto/**',
                        '**/entity/**',
                        '**/*Application.class',
                        '**/*Config.class',
                        '**/*Dto.class',
                        '**/*Entity.class',
                        '**/*MapperImpl.class',
                        '**/*Builder.class',
                        // Exclusiones especÃ­ficas para Lombok
                        '**/User$UserBuilder.class',
                        // Exclusiones del scaffold de Clean Architecture
                        '**/ObjectMapper.class',
                        '**/ObjectMapperConfig.class'
                ])
            }))
        }
    }
}
// ðŸ†• Reemplaza la secciÃ³n "configure(subprojects.findAll..." con esta sintaxis moderna:

// ConfiguraciÃ³n especÃ­fica para el mÃ³dulo usecase (SINTAXIS MODERNA)
project(':usecase') {
    dependencies {
        testImplementation "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
        testImplementation "io.projectreactor:reactor-test:${reactorVersion}"
        testImplementation "org.mockito:mockito-core:${mockitoVersion}"
        testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
    }
}
    // ðŸ“Š ConfiguraciÃ³n de cobertura especÃ­fica para usecase
    tasks.named('jacocoTestCoverageVerification') {
        dependsOn tasks.named('jacocoTestReport')

        violationRules {
            rule {
                limit {
                    counter = 'INSTRUCTION'
                    value = 'COVEREDRATIO'
                    minimum = 0.85 // 85% para casos de uso
                }
            }

            rule {
                limit {
                    counter = 'BRANCH'
                    value = 'COVEREDRATIO'
                    minimum = 0.80 // 80% de cobertura de ramas
                }
            }
        }
    }

    // Task especÃ­fica para verification del usecase
    tasks.register('verifyUseCase') {
        group = 'verification'
        description = 'Ejecuta tests y verifica cobertura del usecase'
        dependsOn tasks.named('test'), tasks.named('jacocoTestCoverageVerification')
    }


// ðŸš€ Task personalizada para ejecutar tests del UseCase (SINTAXIS MODERNA)
tasks.register('testUseCase') {
    group = 'verification'
    description = 'Ejecuta tests especÃ­ficos del mÃ³dulo usecase'
    dependsOn ':usecase:test'

    doLast {
        println "âœ… Tests del UseCase completados"
        println "ðŸ“Š Reporte: usecase/build/reports/jacoco/test/index.html"
    }
}

// ðŸš€ Task para tests con cobertura de todos los mÃ³dulos (SINTAXIS MODERNA)
tasks.register('testWithCoverage') {
    group = 'verification'
    description = 'Ejecuta tests de todos los mÃ³dulos con cobertura'

    // ConfiguraciÃ³n lazy - solo se evalÃºa cuando es necesario
    dependsOn {
        subprojects.findAll {
            it.tasks.findByName('test')
        }.collect { ":${it.name}:test" }
    }

    finalizedBy {
        subprojects.findAll {
            it.tasks.findByName('jacocoTestReport')
        }.collect { ":${it.name}:jacocoTestReport" }
    }

    doLast {
        println "âœ… Tests completados en todos los mÃ³dulos"
        println "ðŸ“Š Reportes disponibles en: */build/reports/jacoco/test/"
    }
}

// ðŸš€ Task especÃ­fica para tu UserUseCaseTest (NUEVA)
tasks.register('testUserUseCase') {
    group = 'verification'
    description = 'Ejecuta especÃ­ficamente UserUseCaseTest'
    dependsOn ':usecase:test'

    doFirst {
        project(':usecase').tasks.test.configure {
            filter {
                includeTestsMatching "co.com.pragma.usecase.user.UserUseCaseTest*"
            }
        }
    }

    doLast {
        println "âœ… UserUseCaseTest completado"
        println "ðŸ“Š Ver resultados en: usecase/build/reports/tests/test/index.html"
    }
}
// ðŸ”§ ConfiguraciÃ³n de JaCoCo global (ya existÃ­a)
jacoco {
    toolVersion = jacocoVersion
}

dependencies {
    // ðŸ”§ Dependencia corregida con versiÃ³n especÃ­fica
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"
}

apply from: './main.gradle'